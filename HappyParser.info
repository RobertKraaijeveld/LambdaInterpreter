-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.5 from HappyParser.y
-----------------------------------------------------------------------------

state 6 contains 4 shift/reduce conflicts.
state 21 contains 4 shift/reduce conflicts.

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parse -> ExpressionSeq                      (0)
	ExpressionSeq -> Expression                        (1)
	ExpressionSeq -> ExpressionSeq Expression          (2)
	Expression -> VAR Expression ExpressionSeq         (3)
	Expression -> '\\' VAR '->' Expression             (4)
	Expression -> Form                                 (5)
	Form -> Form '+' Form                              (6)
	Form -> Form '-' Form                              (7)
	Form -> Form '*' Form                              (8)
	Form -> Single                                     (9)
	Single -> '(' Expression ')'                       (10)
	Single -> NUM                                      (11)
	Single -> VAR                                      (12)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	NUM            { TokenNum $$ }
	VAR            { TokenVar $$ }
	'\\'           { TokenLambda }
	'->'           { TokenArrow }
	'+'            { TokenPlus }
	'-'            { TokenMinus }
	'*'            { TokenTimes }
	'('            { TokenOB }
	')'            { TokenCB }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parse    rule  0
	ExpressionSeq   rules 1, 2
	Expression      rules 3, 4, 5
	Form            rules 6, 7, 8, 9
	Single          rules 10, 11, 12

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	NUM            shift, and enter state 5
	VAR            shift, and enter state 6
	'\\'           shift, and enter state 7
	'('            shift, and enter state 8

	ExpressionSeq  goto state 9
	Expression     goto state 2
	Form           goto state 3
	Single         goto state 4

State 1


	NUM            shift, and enter state 5
	VAR            shift, and enter state 6
	'\\'           shift, and enter state 7
	'('            shift, and enter state 8

	Expression     goto state 2
	Form           goto state 3
	Single         goto state 4

State 2

	ExpressionSeq -> Expression .                       (rule 1)

	NUM            reduce using rule 1
	VAR            reduce using rule 1
	'\\'           reduce using rule 1
	'('            reduce using rule 1
	')'            reduce using rule 1
	%eof           reduce using rule 1


State 3

	Expression -> Form .                                (rule 5)
	Form -> Form . '+' Form                             (rule 6)
	Form -> Form . '-' Form                             (rule 7)
	Form -> Form . '*' Form                             (rule 8)

	NUM            reduce using rule 5
	VAR            reduce using rule 5
	'\\'           reduce using rule 5
	'+'            shift, and enter state 14
	'-'            shift, and enter state 15
	'*'            shift, and enter state 16
	'('            reduce using rule 5
	')'            reduce using rule 5
	%eof           reduce using rule 5


State 4

	Form -> Single .                                    (rule 9)

	NUM            reduce using rule 9
	VAR            reduce using rule 9
	'\\'           reduce using rule 9
	'+'            reduce using rule 9
	'-'            reduce using rule 9
	'*'            reduce using rule 9
	'('            reduce using rule 9
	')'            reduce using rule 9
	%eof           reduce using rule 9


State 5

	Single -> NUM .                                     (rule 11)

	NUM            reduce using rule 11
	VAR            reduce using rule 11
	'\\'           reduce using rule 11
	'+'            reduce using rule 11
	'-'            reduce using rule 11
	'*'            reduce using rule 11
	'('            reduce using rule 11
	')'            reduce using rule 11
	%eof           reduce using rule 11


State 6

	Expression -> VAR . Expression ExpressionSeq        (rule 3)
	Single -> VAR .                                     (rule 12)

	NUM            shift, and enter state 5
			(reduce using rule 12)

	VAR            shift, and enter state 6
			(reduce using rule 12)

	'\\'           shift, and enter state 7
			(reduce using rule 12)

	'+'            reduce using rule 12
	'-'            reduce using rule 12
	'*'            reduce using rule 12
	'('            shift, and enter state 8
			(reduce using rule 12)

	')'            reduce using rule 12
	%eof           reduce using rule 12

	Expression     goto state 13
	Form           goto state 3
	Single         goto state 4

State 7

	Expression -> '\\' . VAR '->' Expression            (rule 4)

	VAR            shift, and enter state 12


State 8

	Single -> '(' . Expression ')'                      (rule 10)

	NUM            shift, and enter state 5
	VAR            shift, and enter state 6
	'\\'           shift, and enter state 7
	'('            shift, and enter state 8

	Expression     goto state 11
	Form           goto state 3
	Single         goto state 4

State 9

	%start_parse -> ExpressionSeq .                     (rule 0)
	ExpressionSeq -> ExpressionSeq . Expression         (rule 2)

	NUM            shift, and enter state 5
	VAR            shift, and enter state 6
	'\\'           shift, and enter state 7
	'('            shift, and enter state 8
	%eof           accept

	Expression     goto state 10
	Form           goto state 3
	Single         goto state 4

State 10

	ExpressionSeq -> ExpressionSeq Expression .         (rule 2)

	NUM            reduce using rule 2
	VAR            reduce using rule 2
	'\\'           reduce using rule 2
	'('            reduce using rule 2
	')'            reduce using rule 2
	%eof           reduce using rule 2


State 11

	Single -> '(' Expression . ')'                      (rule 10)

	')'            shift, and enter state 23


State 12

	Expression -> '\\' VAR . '->' Expression            (rule 4)

	'->'           shift, and enter state 22


State 13

	Expression -> VAR Expression . ExpressionSeq        (rule 3)

	NUM            shift, and enter state 5
	VAR            shift, and enter state 6
	'\\'           shift, and enter state 7
	'('            shift, and enter state 8

	ExpressionSeq  goto state 21
	Expression     goto state 2
	Form           goto state 3
	Single         goto state 4

State 14

	Form -> Form '+' . Form                             (rule 6)

	NUM            shift, and enter state 5
	VAR            shift, and enter state 18
	'('            shift, and enter state 8

	Form           goto state 20
	Single         goto state 4

State 15

	Form -> Form '-' . Form                             (rule 7)

	NUM            shift, and enter state 5
	VAR            shift, and enter state 18
	'('            shift, and enter state 8

	Form           goto state 19
	Single         goto state 4

State 16

	Form -> Form '*' . Form                             (rule 8)

	NUM            shift, and enter state 5
	VAR            shift, and enter state 18
	'('            shift, and enter state 8

	Form           goto state 17
	Single         goto state 4

State 17

	Form -> Form . '+' Form                             (rule 6)
	Form -> Form . '-' Form                             (rule 7)
	Form -> Form . '*' Form                             (rule 8)
	Form -> Form '*' Form .                             (rule 8)

	NUM            reduce using rule 8
	VAR            reduce using rule 8
	'\\'           reduce using rule 8
	'+'            reduce using rule 8
	'-'            reduce using rule 8
	'*'            reduce using rule 8
	'('            reduce using rule 8
	')'            reduce using rule 8
	%eof           reduce using rule 8


State 18

	Single -> VAR .                                     (rule 12)

	NUM            reduce using rule 12
	VAR            reduce using rule 12
	'\\'           reduce using rule 12
	'+'            reduce using rule 12
	'-'            reduce using rule 12
	'*'            reduce using rule 12
	'('            reduce using rule 12
	')'            reduce using rule 12
	%eof           reduce using rule 12


State 19

	Form -> Form . '+' Form                             (rule 6)
	Form -> Form . '-' Form                             (rule 7)
	Form -> Form '-' Form .                             (rule 7)
	Form -> Form . '*' Form                             (rule 8)

	NUM            reduce using rule 7
	VAR            reduce using rule 7
	'\\'           reduce using rule 7
	'+'            reduce using rule 7
	'-'            reduce using rule 7
	'*'            shift, and enter state 16
	'('            reduce using rule 7
	')'            reduce using rule 7
	%eof           reduce using rule 7


State 20

	Form -> Form . '+' Form                             (rule 6)
	Form -> Form '+' Form .                             (rule 6)
	Form -> Form . '-' Form                             (rule 7)
	Form -> Form . '*' Form                             (rule 8)

	NUM            reduce using rule 6
	VAR            reduce using rule 6
	'\\'           reduce using rule 6
	'+'            reduce using rule 6
	'-'            reduce using rule 6
	'*'            shift, and enter state 16
	'('            reduce using rule 6
	')'            reduce using rule 6
	%eof           reduce using rule 6


State 21

	ExpressionSeq -> ExpressionSeq . Expression         (rule 2)
	Expression -> VAR Expression ExpressionSeq .        (rule 3)

	NUM            shift, and enter state 5
			(reduce using rule 3)

	VAR            shift, and enter state 6
			(reduce using rule 3)

	'\\'           shift, and enter state 7
			(reduce using rule 3)

	'('            shift, and enter state 8
			(reduce using rule 3)

	')'            reduce using rule 3
	%eof           reduce using rule 3

	Expression     goto state 10
	Form           goto state 3
	Single         goto state 4

State 22

	Expression -> '\\' VAR '->' . Expression            (rule 4)

	NUM            shift, and enter state 5
	VAR            shift, and enter state 6
	'\\'           shift, and enter state 7
	'('            shift, and enter state 8

	Expression     goto state 24
	Form           goto state 3
	Single         goto state 4

State 23

	Single -> '(' Expression ')' .                      (rule 10)

	NUM            reduce using rule 10
	VAR            reduce using rule 10
	'\\'           reduce using rule 10
	'+'            reduce using rule 10
	'-'            reduce using rule 10
	'*'            reduce using rule 10
	'('            reduce using rule 10
	')'            reduce using rule 10
	%eof           reduce using rule 10


State 24

	Expression -> '\\' VAR '->' Expression .            (rule 4)

	NUM            reduce using rule 4
	VAR            reduce using rule 4
	'\\'           reduce using rule 4
	'('            reduce using rule 4
	')'            reduce using rule 4
	%eof           reduce using rule 4


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 13
Number of terminals: 9
Number of non-terminals: 5
Number of states: 25
