-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.5 from HappyParser.y
-----------------------------------------------------------------------------

state 7 contains 1 shift/reduce conflicts.

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parse -> Expression                         (0)
	Expression -> let VAR '=' Expression in Expression   (1)
	Expression -> '\\' MultiVariable '->' Expression   (2)
	Expression -> Form                                 (3)
	Form -> Form '+' Form                              (4)
	Form -> Form '-' Form                              (5)
	Form -> Form '*' Form                              (6)
	Form -> Tuple                                      (7)
	Tuple -> Tuple Single                              (8)
	Tuple -> Single                                    (9)
	Single -> '(' Expression ')'                       (10)
	Single -> NUM                                      (11)
	Single -> MultiVariable                            (12)
	MultiVariable -> VAR                               (13)
	MultiVariable -> MultiVariable VAR                 (14)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	let            { TokenLet }
	in             { TokenIn }
	NUM            { TokenNum $$ }
	VAR            { TokenVar $$ }
	'\\'           { TokenLambda }
	'->'           { TokenArrow }
	'='            { TokenEq }
	'+'            { TokenPlus }
	'-'            { TokenMinus }
	'*'            { TokenTimes }
	'('            { TokenOB }
	')'            { TokenCB }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parse    rule  0
	Expression      rules 1, 2, 3
	Form            rules 4, 5, 6, 7
	Tuple           rules 8, 9
	Single          rules 10, 11, 12
	MultiVariable   rules 13, 14

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	let            shift, and enter state 2
	NUM            shift, and enter state 8
	VAR            shift, and enter state 9
	'\\'           shift, and enter state 10
	'('            shift, and enter state 11

	Expression     goto state 3
	Form           goto state 4
	Tuple          goto state 5
	Single         goto state 6
	MultiVariable  goto state 7

State 1


	let            shift, and enter state 2


State 2

	Expression -> let . VAR '=' Expression in Expression    (rule 1)

	VAR            shift, and enter state 19


State 3

	%start_parse -> Expression .                        (rule 0)

	%eof           accept


State 4

	Expression -> Form .                                (rule 3)
	Form -> Form . '+' Form                             (rule 4)
	Form -> Form . '-' Form                             (rule 5)
	Form -> Form . '*' Form                             (rule 6)

	in             reduce using rule 3
	'+'            shift, and enter state 16
	'-'            shift, and enter state 17
	'*'            shift, and enter state 18
	')'            reduce using rule 3
	%eof           reduce using rule 3


State 5

	Form -> Tuple .                                     (rule 7)
	Tuple -> Tuple . Single                             (rule 8)

	in             reduce using rule 7
	NUM            shift, and enter state 8
	VAR            shift, and enter state 9
	'+'            reduce using rule 7
	'-'            reduce using rule 7
	'*'            reduce using rule 7
	'('            shift, and enter state 11
	')'            reduce using rule 7
	%eof           reduce using rule 7

	Single         goto state 15
	MultiVariable  goto state 7

State 6

	Tuple -> Single .                                   (rule 9)

	in             reduce using rule 9
	NUM            reduce using rule 9
	VAR            reduce using rule 9
	'+'            reduce using rule 9
	'-'            reduce using rule 9
	'*'            reduce using rule 9
	'('            reduce using rule 9
	')'            reduce using rule 9
	%eof           reduce using rule 9


State 7

	Single -> MultiVariable .                           (rule 12)
	MultiVariable -> MultiVariable . VAR                (rule 14)

	in             reduce using rule 12
	NUM            reduce using rule 12
	VAR            shift, and enter state 14
			(reduce using rule 12)

	'+'            reduce using rule 12
	'-'            reduce using rule 12
	'*'            reduce using rule 12
	'('            reduce using rule 12
	')'            reduce using rule 12
	%eof           reduce using rule 12


State 8

	Single -> NUM .                                     (rule 11)

	in             reduce using rule 11
	NUM            reduce using rule 11
	VAR            reduce using rule 11
	'+'            reduce using rule 11
	'-'            reduce using rule 11
	'*'            reduce using rule 11
	'('            reduce using rule 11
	')'            reduce using rule 11
	%eof           reduce using rule 11


State 9

	MultiVariable -> VAR .                              (rule 13)

	in             reduce using rule 13
	NUM            reduce using rule 13
	VAR            reduce using rule 13
	'->'           reduce using rule 13
	'+'            reduce using rule 13
	'-'            reduce using rule 13
	'*'            reduce using rule 13
	'('            reduce using rule 13
	')'            reduce using rule 13
	%eof           reduce using rule 13


State 10

	Expression -> '\\' . MultiVariable '->' Expression    (rule 2)

	VAR            shift, and enter state 9

	MultiVariable  goto state 13

State 11

	Single -> '(' . Expression ')'                      (rule 10)

	let            shift, and enter state 2
	NUM            shift, and enter state 8
	VAR            shift, and enter state 9
	'\\'           shift, and enter state 10
	'('            shift, and enter state 11

	Expression     goto state 12
	Form           goto state 4
	Tuple          goto state 5
	Single         goto state 6
	MultiVariable  goto state 7

State 12

	Single -> '(' Expression . ')'                      (rule 10)

	')'            shift, and enter state 25


State 13

	Expression -> '\\' MultiVariable . '->' Expression    (rule 2)
	MultiVariable -> MultiVariable . VAR                (rule 14)

	VAR            shift, and enter state 14
	'->'           shift, and enter state 24


State 14

	MultiVariable -> MultiVariable VAR .                (rule 14)

	in             reduce using rule 14
	NUM            reduce using rule 14
	VAR            reduce using rule 14
	'->'           reduce using rule 14
	'+'            reduce using rule 14
	'-'            reduce using rule 14
	'*'            reduce using rule 14
	'('            reduce using rule 14
	')'            reduce using rule 14
	%eof           reduce using rule 14


State 15

	Tuple -> Tuple Single .                             (rule 8)

	in             reduce using rule 8
	NUM            reduce using rule 8
	VAR            reduce using rule 8
	'+'            reduce using rule 8
	'-'            reduce using rule 8
	'*'            reduce using rule 8
	'('            reduce using rule 8
	')'            reduce using rule 8
	%eof           reduce using rule 8


State 16

	Form -> Form '+' . Form                             (rule 4)

	NUM            shift, and enter state 8
	VAR            shift, and enter state 9
	'('            shift, and enter state 11

	Form           goto state 23
	Tuple          goto state 5
	Single         goto state 6
	MultiVariable  goto state 7

State 17

	Form -> Form '-' . Form                             (rule 5)

	NUM            shift, and enter state 8
	VAR            shift, and enter state 9
	'('            shift, and enter state 11

	Form           goto state 22
	Tuple          goto state 5
	Single         goto state 6
	MultiVariable  goto state 7

State 18

	Form -> Form '*' . Form                             (rule 6)

	NUM            shift, and enter state 8
	VAR            shift, and enter state 9
	'('            shift, and enter state 11

	Form           goto state 21
	Tuple          goto state 5
	Single         goto state 6
	MultiVariable  goto state 7

State 19

	Expression -> let VAR . '=' Expression in Expression    (rule 1)

	'='            shift, and enter state 20


State 20

	Expression -> let VAR '=' . Expression in Expression    (rule 1)

	let            shift, and enter state 2
	NUM            shift, and enter state 8
	VAR            shift, and enter state 9
	'\\'           shift, and enter state 10
	'('            shift, and enter state 11

	Expression     goto state 27
	Form           goto state 4
	Tuple          goto state 5
	Single         goto state 6
	MultiVariable  goto state 7

State 21

	Form -> Form . '+' Form                             (rule 4)
	Form -> Form . '-' Form                             (rule 5)
	Form -> Form . '*' Form                             (rule 6)
	Form -> Form '*' Form .                             (rule 6)

	in             reduce using rule 6
	'+'            reduce using rule 6
	'-'            reduce using rule 6
	'*'            reduce using rule 6
	')'            reduce using rule 6
	%eof           reduce using rule 6


State 22

	Form -> Form . '+' Form                             (rule 4)
	Form -> Form . '-' Form                             (rule 5)
	Form -> Form '-' Form .                             (rule 5)
	Form -> Form . '*' Form                             (rule 6)

	in             reduce using rule 5
	'+'            reduce using rule 5
	'-'            reduce using rule 5
	'*'            shift, and enter state 18
	')'            reduce using rule 5
	%eof           reduce using rule 5


State 23

	Form -> Form . '+' Form                             (rule 4)
	Form -> Form '+' Form .                             (rule 4)
	Form -> Form . '-' Form                             (rule 5)
	Form -> Form . '*' Form                             (rule 6)

	in             reduce using rule 4
	'+'            reduce using rule 4
	'-'            reduce using rule 4
	'*'            shift, and enter state 18
	')'            reduce using rule 4
	%eof           reduce using rule 4


State 24

	Expression -> '\\' MultiVariable '->' . Expression    (rule 2)

	let            shift, and enter state 2
	NUM            shift, and enter state 8
	VAR            shift, and enter state 9
	'\\'           shift, and enter state 10
	'('            shift, and enter state 11

	Expression     goto state 26
	Form           goto state 4
	Tuple          goto state 5
	Single         goto state 6
	MultiVariable  goto state 7

State 25

	Single -> '(' Expression ')' .                      (rule 10)

	in             reduce using rule 10
	NUM            reduce using rule 10
	VAR            reduce using rule 10
	'+'            reduce using rule 10
	'-'            reduce using rule 10
	'*'            reduce using rule 10
	'('            reduce using rule 10
	')'            reduce using rule 10
	%eof           reduce using rule 10


State 26

	Expression -> '\\' MultiVariable '->' Expression .    (rule 2)

	in             reduce using rule 2
	')'            reduce using rule 2
	%eof           reduce using rule 2


State 27

	Expression -> let VAR '=' Expression . in Expression    (rule 1)

	in             shift, and enter state 28


State 28

	Expression -> let VAR '=' Expression in . Expression    (rule 1)

	let            shift, and enter state 2
	NUM            shift, and enter state 8
	VAR            shift, and enter state 9
	'\\'           shift, and enter state 10
	'('            shift, and enter state 11

	Expression     goto state 29
	Form           goto state 4
	Tuple          goto state 5
	Single         goto state 6
	MultiVariable  goto state 7

State 29

	Expression -> let VAR '=' Expression in Expression .    (rule 1)

	in             reduce using rule 1
	')'            reduce using rule 1
	%eof           reduce using rule 1


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 15
Number of terminals: 12
Number of non-terminals: 6
Number of states: 30
